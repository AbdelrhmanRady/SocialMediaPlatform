@model PhotoViewModel

@{
    ViewData["Title"] = "Add Picture";
}
<link href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<link rel="stylesheet" href="~/css//AddPicture.css" />
<div class="BigContainer">

    <div class="container pic">
        <div asp-validation-summary="All" class="text-danger"></div>
        <h2>Set Your Profile Picture</h2>
        <br />
        <input type="file" name="file" id="profilePictureInput" class="inputfile" accept="image/*" />
        <label class="uploadLabel" for="profilePictureInput"><i class="fa-solid fa-upload"></i> Choose a file...</label>
        <div class="preview" id="profilePicturePreview"></div>
    </div>

    <!-- Modal for cropping -->
    <div id="cropModal">
        <h3>Crop your image</h3>
        <div class="cropper-container">
            <img id="cropperImage" alt="Crop Image" >
            <div class="circle-overlay"></div>
        </div>
        <button class="PictureButton" id="cropButton">Crop</button>
        <button class="PictureButton" id="cancelButton" class="cancel">Cancel</button>
    </div>

    <!-- Overlay -->
    <div id="overlay"></div>

    <!-- Form to submit the cropped image -->
    <form asp-action="AddPicture" id="profileForm" method="post" enctype="multipart/form-data">
        <input type="hidden" asp-for="photoBase64" id="croppedImageInput">
        <button class="PictureButton" type="submit">Submit</button>
        <br>
        <br>
        <a asp-action="Index" asp-controller="Home" style="color: gray;">Skip</a>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<script>
 
    const profilePictureInput = document.getElementById('profilePictureInput');
    const profilePicturePreview = document.getElementById('profilePicturePreview');
    const cropperImage = document.getElementById('cropperImage');
    const cropModal = document.getElementById('cropModal');
    const overlay = document.getElementById('overlay');
    const croppedImageInput = document.getElementById('croppedImageInput');
    let cropper;
    const minZoom = 1;
    const maxZoom = 3;

    profilePictureInput.addEventListener('change', function(event) {
        const file = event.target.files[0];
        const reader = new FileReader();

        reader.onload = function(e) {
            cropperImage.src = e.target.result;
            cropModal.style.display = 'block';
            overlay.style.display = 'block';

            // Initialize cropper
            cropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 1,
                autoCropArea: 1,
                movable: true,
                zoomable: true,
                rotatable: true,
                scalable: true,
                dragMode: 'move',
                minCropBoxWidth: 150,
                minCropBoxHeight: 150,
                cropBoxMovable: false,
                cropBoxResizable: false,
                ready: function () {
                    // Set initial zoom level
                    cropper.zoomTo(minZoom);
                }
            });

            cropperImage.addEventListener('wheel', function(e) {
                e.preventDefault();
                const zoomFactor = 0.1;
                let newZoom = cropper.getData().scaleX + (e.deltaY < 0 ? zoomFactor : -zoomFactor);
                newZoom = Math.max(minZoom, Math.min(newZoom, maxZoom));
                cropper.zoomTo(newZoom);
            });
        };
        reader.readAsDataURL(file);
    });

    document.getElementById('cropButton').addEventListener('click', function() {
        const canvas = cropper.getCroppedCanvas({
            width: 800,
            height: 800,
        });
        document.getElementById('profilePictureInput').value = '';

        // Update preview
        profilePicturePreview.style.backgroundImage = `url(${canvas.toDataURL()})`;

        // Convert the canvas to a data URL and store it in the hidden input
        canvas.toBlob(function(blob) {
            // Convert Blob to a URL-safe base64 string and store it in the hidden input field
            const reader = new FileReader();
            reader.onloadend = function() {
                croppedImageInput.value = reader.result;
            };
            reader.readAsDataURL(blob);
        }, 'image/png');

        cropper.destroy();
        cropModal.style.display = 'none';
        overlay.style.display = 'none';
    });

    document.getElementById('cancelButton').addEventListener('click', function() {
        cropper.destroy();
        cropModal.style.display = 'none';
        overlay.style.display = 'none';
    });
</script>